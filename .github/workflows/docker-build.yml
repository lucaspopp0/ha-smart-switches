name: docker-build

on:
  workflow_call:
    inputs:
      push:
        type: boolean
        default: false
      rebuild-server:
        type: boolean
        default: false
      rebuild-site:
        type: boolean
        default: false
    secrets:
      BOT_APP_ID:
        required: true
      BOT_APP_PRIVATE_KEY:
        required: true
      DOCKER_USER:
        required: false
      DOCKER_TOKEN:
        required: false
    outputs:
      pushed-changes:
        value: ${{ jobs.generate.outputs.changes == 'true' }}
        description: true if changes generated

permissions:
  contents: read
  packages: write

defaults:
  run:
    shell: bash

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.architectures.outputs.architectures }}
      config-version: ${{ steps.config-version.outputs.version }}
    steps:
      -
        uses: actions/checkout@v4
      -
        name: Parse architectures from config
        id: architectures
        run: |
          ARCHITECTURES=$(cat smart-switches/config.yml | yq -I0 -o=json '.arch')
          echo "architectures=$ARCHITECTURES" | tee -a "$GITHUB_OUTPUT"
      -
        name: Read version from config.yml
        id: config-version
        run: |
          CONFIG_VERSION=$(yq '.version' ./smart-switches/config.yml)
          echo "version=$CONFIG_VERSION" | tee -a "$GITHUB_OUTPUT"
  
  generate:
    needs: setup
    if: ${{ github.event_name != 'push' && (inputs.rebuild-server || inputs.rebuild-site) }}
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.detect-changes.outputs.changes == 'true' }}
    steps:
      -
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      -
        name: Restore server cache
        id: restore-server-cache
        if: ${{ inputs.rebuild-server }}
        uses: actions/cache/restore@v4
        with:
          path: smart-switches/server/spec
          key: server-spec-${{ hashFiles('smart-switches/server/**/*.go') }}
      -
        if: ${{ steps.restore-server-cache.outputs.cache-hit != 'true' }}
        uses: actions/setup-go@v5
        with:
          go-version-file: smart-switches/server/go.mod
          cache-dependency-path: smart-switches/server/go.sum
      -
        name: go mod tidy
        working-directory: smart-switches
        run: |
          make tidy-server
      -
        if: ${{ steps.restore-server-cache.outputs.cache-hit != 'true' }}
        name: Re-generate server openapi spec
        working-directory: smart-switches
        run: |
          make generate-server-spec
      -
        name: Save server cache
        if: ${{ steps.restore-server-cache.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: smart-switches/server/spec
          key: server-spec-${{ hashFiles('smart-switches/server/**/*.go') }}
      -
        if: ${{ inputs.rebuild-site }}
        uses: actions/setup-node@v4
        with:
          node-version-file: smart-switches/site/.nvmrc
          cache-dependency-path: smart-switches/site/package-lock.json
          cache: npm
      -
        if: ${{ inputs.rebuild-site }}
        name: Install site dependencies
        working-directory: smart-switches/site
        run: |
          npm ci
      -

        if: ${{ inputs.rebuild-site }}
        name: Re-generate server sdk
        working-directory: smart-switches
        run: |
          if [[ ! -d site/src/api ]]; then
            mkdir -p site/src/api
          fi

          make generate-server-sdk
      -
        if: ${{ inputs.rebuild-site }}
        name: Build site
        working-directory: smart-switches/site
        run: |
          rm -rf public
          npm run build
      -
        name: Check for generated changes
        id: detect-changes
        run: |
          git add .
          git status

          if [[ -n "$(git status -s)" ]]; then
            echo "changes=true" | tee -a "$GITHUB_OUTPUT"
          else
            echo "changes=false" | tee -a "$GITHUB_OUTPUT"
          fi
      -
        uses: actions/create-github-app-token@v1
        if: ${{ steps.detect-changes.outputs.changes == 'true' }}
        id: app-token
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
      -
        name: Commit changes
        if: ${{ steps.detect-changes.outputs.changes == 'true' }}
        uses: planetscale/ghcommit-action@v0.2.15
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          commit_message: "[bot] generate"
          repo: ${{ github.repository }}
          branch: ${{ github.head_ref || github.ref_name }}

  build-and-push:
    needs:
      - setup
      - generate
    if: ${{ !failure() && !cancelled() && needs.generate.outputs.changes != 'true' }}
    strategy:
      fail-fast: false
      matrix:
        architecture: ${{ fromJson(needs.setup.outputs.architectures) }}
    runs-on: ${{ contains(fromJson('["armhf", "armv7", "aarch64"]'), matrix.architecture) && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      -
        uses: actions/checkout@v4
      -
        name: docker login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}
      -
        name: Docker build flags
        id: flags
        run: |
          from=$(yq --no-colors eval ".build_from.${{ matrix.architecture }}" "smart-switches/build.yaml")
          echo "from=${from}" | tee -a "$GITHUB_OUTPUT"

          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "platform=linux/amd64" | tee -a "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "platform=linux/386" | tee -a "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "platform=linux/arm/v6" | tee -a "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" | tee -a "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "platform=linux/arm64/v8" | tee -a "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi

          echo "go-base=$go_base" | tee -a "$GITHUB_OUTPUT"
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0
      -
        name: docker build
        uses: docker/build-push-action@v6.17.0
        with:
          push: ${{ inputs.push }}
          context: smart-switches
          file: smart-switches/Dockerfile
          platforms: ${{ steps.flags.outputs.platform }}
          tags: ghcr.io/${{ github.repository_owner }}/smart-switches:${{ needs.setup.outputs.config-version }}
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
