name: docker-build

on:
  workflow_call:
    inputs:
      ref:
        type: string
        default: ""
      push:
        type: boolean
        default: false
      rebuild-server:
        type: boolean
        default: false
      rebuild-site:
        type: boolean
        default: false
    secrets:
      DOCKER_USER:
        required: false
      DOCKER_TOKEN:
        required: false

permissions:
  contents: read
  packages: write

defaults:
  run:
    shell: bash

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.architectures.outputs.architectures }}
      config-version: ${{ steps.config-version.outputs.version }}
    steps:
      -
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}
      -
        name: Parse architectures from config
        id: architectures
        run: |
          ARCHITECTURES=$(cat smart-switches/config.yml | yq -I0 -o=json '.arch')
          echo "architectures=$ARCHITECTURES" | tee -a "$GITHUB_OUTPUT"
      -
        name: Read version from config.yml
        id: config-version
        run: |
          CONFIG_VERSION=$(yq '.version' ./smart-switches/config.yml)
          echo "version=$CONFIG_VERSION" | tee -a "$GITHUB_OUTPUT"

  docker-build:
    needs: setup
    strategy:
      matrix:
        architecture: ${{ fromJson(needs.setup.outputs.architectures) }}
    runs-on: ${{ contains(fromJson('["armhf", "armv7", "aarch64"]'), matrix.architecture) && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      -
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      -
        name: Restore server cache
        id: restore-server-cache
        if: ${{ inputs.rebuild-server }}
        uses: actions/cache/restore@v4
        with:
          path: smart-switches/server/spec
          key: server-spec-${{ hashFiles('smart-switches/server/**/*.go') }}
      -
        if: ${{ steps.restore-server-cache.outputs.cache-hit == 'false' }}
        uses: actions/setup-go@v5
        with:
          go-version-file: smart-switches/server/go.mod
          cache-dependency-path: smart-switches/server/go.sum
      -
        if: ${{ steps.restore-server-cache.outputs.cache-hit == 'false' }}
        name: Re-generate server openapi spec
        working-directory: smart-switches/server
        run: |
          # Cleanup the spec folder
          rm -rf spec
          mkdir spec

          go run . get-openapi \
            | yq -o=yaml '.' \
            > spec/openapi.yaml
      -
        name: Save server cache
        if: ${{ steps.restore-server-cache.outputs.cache-hit == 'false' }}
        uses: actions/cache/save@v4
        with:
          path: smart-switches/server/spec
          key: server-spec-${{ hashFiles('smart-switches/server/**/*.go') }}
      -
        if: ${{ inputs.rebuild-site }}
        name: Restore site cache
        id: restore-gatsby-cache
        uses: actions/cache/restore@v4
        with:
          path: smart-switches/site/.cache
          key: gatsby-cache-${{ hashFiles('smart-switches/server/spec/openapi.yaml', 'smart-switches/site/package-lock.json', 'smart-switches/site/src/**') }}
      -
        if: ${{ steps.restore-gatsby-cache.outputs.cache-hit != 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: smart-switches/site/.nvmrc
          cache-dependency-path: smart-switches/site/package-lock.json
          cache: npm
      -
        if: ${{ steps.restore-gatsby-cache.outputs.cache-hit != 'true' }}
        name: Install site dependencies
        working-directory: smart-switches/site
        run: |
          npm ci
      -

        if: ${{ steps.restore-gatsby-cache.outputs.cache-hit != 'true' }}
        name: Re-generate server sdk
        working-directory: smart-switches/site
        run: |
          if [[ ! -d src/api ]]; then
            mkdir src/api
          fi

          npx openapi-typescript \
            ../server/spec/openapi.yaml \
            -o ./src/api/index.d.ts
      -
        if: ${{ steps.restore-gatsby-cache.outputs.cache-hit != 'true' }}
        name: Build site
        working-directory: smart-switches/site
        run: |
          rm -rf public
          npm run build
      -
        name: Check for generated changes
        id: detect-changes
        run: |
          git add .
          git status

          if [[ -n "$(git status -s)" ]]; then
            echo "changes=true" | tee -a "$GITHUB_OUTPUT"
          else
            echo "changes=false" | tee -a "$GITHUB_OUTPUT"
          fi
      -
        name: Save Gatsby cache
        if: ${{ always() && steps.restore-gatsby-cache.outputs.cache-hit == 'false' }}
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.restore-gatsby-cache.outputs.cache-primary-key }}
          path: smart-switches/site/.cache
      -
        uses: actions/create-github-app-token@v1
        if: ${{ steps.detect-changes.outputs.changes == 'true' }}
        id: app-token
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
      -
        name: Commit changes
        if: ${{ steps.detect-changes.outputs.changes == 'true' }}
        uses: planetscale/ghcommit-action@v0.2.0
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          commit_message: "[bot] generate"
          repo: ${{ github.repository }}
          branch: ${{ github.head_ref || github.ref_name }}
      -
        name: Fail job if changes committed
        if: ${{ steps.detect-changes.outputs.changes == 'true' }}
        run: |
          exit 1
      -
        name: docker build
        run: |
          docker run \
            --rm \
            --privileged \
            -v $(pwd)/smart-switches:/data \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            ghcr.io/home-assistant/amd64-builder:latest \
            --target smart-switches \
            --image "smart-switches-{arch}" \
            --addon \
            --${{ matrix.architecture }} \
            ${{ inputs.push && '' || '--no-latest ' }} \
            --cache-tag ${{ github.ref }} \
            --version "pr${{ github.event.number }}" \
            -r ${{ github.server_url }}/${{ github.repository }} \
            -b ${{ github.head_ref || github.ref_name }} \
            -d "ghcr.io/${{ github.repository }}"
