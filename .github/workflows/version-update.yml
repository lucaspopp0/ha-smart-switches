name: version-update

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      dry-run:
        type: boolean
        default: false
    secrets:
      BOT_APP_ID:
        required: true
      BOT_APP_PRIVATE_KEY:
        required: true
    outputs:
      current-version:
        value: ${{ jobs.bump-version.outputs.current-version }}
      next-major-tag:
        value: ${{ jobs.bump-version.outputs.next-major-tag }}
      next-minor-tag:
        value: ${{ jobs.bump-version.outputs.next-minor-tag }}
      next-patch-tag:
        value: ${{ jobs.bump-version.outputs.next-patch-tag }}
      next-incrm-tag:
        value: ${{ jobs.bump-version.outputs.next-incrm-tag }}
      change:
        value: ${{ jobs.bump-version.outputs.change }}
      update-sha:
        value: ${{ jobs.bump-version.outputs.update-sha }}

permissions:
  contents: write
  id-token: write
  pull-requests: read

env:

  DRY_RUN: ${{ inputs.dry-run && 'true' || 'false' }}
  DRY_RUN_FLAG: ${{ inputs.dry-run && ' --dry-run ' || ' ' }}

jobs:

  bump-version:
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.config-version.outputs.version }}
      next-major-tag: ${{ steps.output-tags.outputs.MAJOR }}
      next-minor-tag: ${{ steps.output-tags.outputs.MINOR }}
      next-patch-tag: ${{ steps.output-tags.outputs.PATCH }}
      next-incrm-tag: ${{ steps.output-tags.outputs.INCR }}
      change: ${{ steps.output-tags.outputs.change }}
      update-sha: ${{ steps.commit.outputs.commit-hash }}
    steps:
      -
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
      -
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0
      -
        name: Read version from config.yml
        id: config-version
        run: |
          CONFIG_VERSION=$(yq '.version' ./smart-switches/config.yml)
          echo "version=$CONFIG_VERSION" | tee -a "$GITHUB_OUTPUT"
      -
        name: Determine version format
        id: version-format
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          VERSION_FORMAT='${major}.${minor}.${patch}.${increment}'
          
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            VERSION_FORMAT='${major}.${minor}.${patch}-pr'"${PR_NUMBER}"'-${increment}'
          fi

          echo "version_format=$VERSION_FORMAT" | tee -a "$GITHUB_OUTPUT"
      -
        name: Compute next version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: v
          enable_prerelease_mode: true
      -
        name: Construct version tags
        id: output-tags
        run: |
          LATEST_MAJOR="${{ steps.version.outputs.major }}"
          LATEST_MINOR="${LATEST_MAJOR}.${{ steps.version.outputs.minor }}"
          LATEST_PATCH="${LATEST_MINOR}.${{ steps.version.outputs.patch }}"
          LATEST_INCRM="${LATEST_PATCH}.${{ steps.version.outputs.increment }}"

          echo "::notice::Detected version: ${LATEST_INCRM}"

          {
            echo "MAJOR=v$LATEST_MAJOR";
            echo "MINOR=v$LATEST_MINOR";
            echo "PATCH=v$LATEST_PATCH";
            echo "INCRM=v$LATEST_INCRM";
          } | tee -a "$GITHUB_OUTPUT" "$GITHUB_ENV"
          
          if [[ "$LATEST_INCRM" == "${{ steps.config-version.outputs.version }}" ]]; then
            echo "change=false" | tee -a "$GITHUB_OUTPUT"
          else
            echo "change=true" | tee -a "$GITHUB_OUTPUT"
          fi
      -
        name: Configure git
        run: |
          git config --global \
            user.name 'lucaspopp0-bot[bot]'

          git config --global \
            user.email 'lucaspopp0-bot[bot]@users.noreply.github.com'
      -
        name: Checkout ref for commit
        run: |
          # Checkout current ref
          git fetch --all
          git checkout "${{ github.head_ref || github.ref_name }}"
      -
        name: Update config.yml
        env:
          VERSION_TAG: ${{ steps.output-tags.outputs.INCRM }}
        run: |
          WITHOUT_PREFIX="${VERSION_TAG#v}" \
            yq -i \
              '.version = env(WITHOUT_PREFIX)' \
              ./smart-switches/config.yml
      -
        name: "Commit changes and push (DRY_RUN=${{ env.DRY_RUN }})"
        id: commit
        run: |
          git add .
          git commit -m "[bot] ${INCRM}"
          
          # Output commit hash
          COMMIT_HASH=$(git show --no-patch --format="%H")
          echo "commit-hash=$COMMIT_HASH" | tee -a "$GITHUB_OUTPUT"

          # push commit
          PUSH_ARGS="push --force"
          if [[ "${DRY_RUN}" == "true" ]]; then
            PUSH_ARGS="${PUSH_ARGS} --dry-run"
          fi

          git push \
            --force \
            ${DRY_RUN_FLAG}
      -
        name: "Update tags (DRY_RUN=${{ env.DRY_RUN }})"
        run: |
          git tag "$INCRM"

          tags=("$INCRM" "$MAJOR" "$MINOR" "$PATCH")

          for tag in "${tags[@]}"; do
            echo "::group::Pointing tag ${tag} to ${{ steps.commit.outputs.commit-hash }}"

            # Delete the remote tag
            git push \
              --delete \
              ${DRY_RUN_FLAG} \
              origin "$tag" \
              2> /dev/null \
            || true

            # Delete the local tag
            git tag \
              --delete \
              "$tag" \
              2> /dev/null \
            || true
            
            # Create a new tag :)
            git tag "$tag"

            echo "::endgroup::"
          done

          git push --tags ${DRY_RUN_FLAG}
      -
        name: Release
        if: ${{ github.event_name != 'pull_request' && !inputs.dry-run }}
        env:
          GH_TOKEN: ${{ github.token }}
          NOTES_START_TAG: v${{ steps.version.outputs.previous_version }}
        run: |
          if [[ $(gh release view "${PATCH}" > /dev/null) ]]; then
            gh release delete "${PATCH}" -y
          fi

          gh release create ${INCRM} \
            --title "${PATCH}" \
            --generate-notes \
            --notes-start-tag "${NOTES_START_TAG}"
