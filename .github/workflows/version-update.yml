name: version-update

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      BOT_APP_ID:
        required: true
      BOT_APP_PRIVATE_KEY:
        required: true
    outputs:
      current-version:
        value: ${{ jobs.bump-version.outputs.current-version }}
      next-major-tag:
        value: ${{ jobs.bump-version.outputs.next-major-tag }}
      next-minor-tag:
        value: ${{ jobs.bump-version.outputs.next-minor-tag }}
      next-patch-tag:
        value: ${{ jobs.bump-version.outputs.next-patch-tag }}
      next-incrm-tag:
        value: ${{ jobs.bump-version.outputs.next-incrm-tag }}
      change:
        value: ${{ jobs.bump-version.outputs.change }}
      update-sha:
        value: ${{ jobs.bump-version.outputs.update-sha }}

permissions:
  contents: write
  id-token: write
  pull-requests: read

jobs:

  bump-version:
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.config-version.outputs.version }}
      next-major-tag: ${{ steps.outputs.outputs.major_tag }}
      next-minor-tag: ${{ steps.outputs.outputs.minor_tag }}
      next-patch-tag: ${{ steps.outputs.outputs.patch_tag }}
      next-incrm-tag: ${{ steps.outputs.outputs.incrm_tag }}
      change: ${{ steps.outputs.outputs.change }}
      update-sha: ${{ steps.commit.outputs.commit-hash }}
    steps:
      -
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
      -
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0
      -
        name: Read version from config.yml
        id: config-version
        run: |
          CONFIG_VERSION=$(yq '.version' ./smart-switches/config.yml)
          echo "version=$CONFIG_VERSION" | tee -a "$GITHUB_OUTPUT"
      -
        name: Determine version format
        id: version-format
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          VERSION_FORMAT='${major}.${minor}.${patch}.${increment}'
          
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            VERSION_FORMAT='${major}.${minor}.${patch}-pr'"${PR_NUMBER}"'-${increment}'
          fi

          echo "version_format=$VERSION_FORMAT" | tee -a "$GITHUB_OUTPUT"
      -
        name: Compute next version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: v
          enable_prerelease_mode: true
      -
        name: Construct outputs
        id: outputs
        run: |
          LATEST_MAJOR="${{ steps.version.outputs.major }}"
          LATEST_MINOR="${LATEST_MAJOR}.${{ steps.version.outputs.minor }}"
          LATEST_PATCH="${LATEST_MINOR}.${{ steps.version.outputs.patch }}"
          LATEST_INCRM="${LATEST_PATCH}.${{ steps.version.outputs.increment }}"

          echo "major_tag=v$LATEST_MAJOR" | tee -a "$GITHUB_OUTPUT"
          echo "minor_tag=v$LATEST_MINOR" | tee -a "$GITHUB_OUTPUT"
          echo "patch_tag=v$LATEST_PATCH" | tee -a "$GITHUB_OUTPUT"
          echo "incrm_tag=v$LATEST_INCRM" | tee -a "$GITHUB_OUTPUT"
          
          if [[ "$LATEST_INCRM" == "${{ steps.config-version.outputs.version }}" ]]; then
            echo "change=false" | tee -a "$GITHUB_OUTPUT"
          else
            echo "change=true" | tee -a "$GITHUB_OUTPUT"
          fi
      -
        name: Update config.yml
        env:
          VERSION_TAG: ${{ steps.outputs.outputs.incrm_tag }}
        run: |
          WITHOUT_PREFIX="${VERSION_TAG#v}" \
            yq -i \
              '.version = env(WITHOUT_PREFIX)' \
              ./smart-switches/config.yml
      -
        name: Commit new version
        if: ${{ github.event_name != 'pull_request '}}
        env:
          FULL: ${{ steps.outputs.outputs.incrm_tag }}
          PATCH: ${{ steps.outputs.outputs.patch_tag }}
          MINOR: ${{ steps.outputs.outputs.minor_tag }}
          MAJOR: ${{ steps.outputs.outputs.major_tag }}
        run: |
          git config --global \
            user.name 'lucaspopp0-bot[bot]'

          git config --global \
            user.email 'lucaspopp0-bot[bot]@users.noreply.github.com'

          # Checkout current ref
          git checkout "${{ github.ref_name }}"

          # Create commit
          git add .
          git commit -m "[bot] ${FULL}"
          
          COMMIT_HASH=$(git show --no-patch --format="%H")
          echo "commit-hash=$COMMIT_HASH" | tee -a "$GITHUB_OUTPUT"
          git push --force
          
          # Push tags
          git tag "$FULL"
          
          git push --delete origin "$PATCH" 2> /dev/null || true
          git tag --delete "$PATCH" 2> /dev/null || true
          git tag "$PATCH"

          git push --delete origin "$MINOR" 2> /dev/null || true
          git tag --delete "$MINOR" 2> /dev/null || true
          git tag "$MINOR"

          git push --delete origin "$MAJOR" 2> /dev/null || true
          git tag --delete "$MAJOR" 2> /dev/null || true
          git tag "$MAJOR"

          git push --tags
      -
        name: Release
        if: ${{ github.event_name != 'pull_request '}}
        env:
          GH_TOKEN: ${{ github.token }}
          TAG: ${{ steps.outputs.outputs.incrm_tag }}
          RELEASE: ${{ steps.outputs.outputs.patch_tag }}
        run: |
          if [[ $(gh release view "${RELEASE}" > /dev/null) ]]; then
            gh release delete "${RELEASE}" -y
          fi

          gh release create \
            ${TAG} \
            --title "${RELEASE}" \
            --generate-notes --notes-start-tag "v${{ steps.version.outputs.previous_version }}"
