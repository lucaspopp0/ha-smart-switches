/* tslint:disable */
/* eslint-disable */
/**
 * Smart Switches
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof Config
     */
    '$schema'?: string;
    /**
     * 
     * @type {{ [key: string]: Switch; }}
     * @memberof Config
     */
    'switches': { [key: string]: Switch; };
}
/**
 * 
 * @export
 * @interface ErrorDetail
 */
export interface ErrorDetail {
    /**
     * Where the error occurred, e.g. \'body.items[3].tags\' or \'path.thing-id\'
     * @type {string}
     * @memberof ErrorDetail
     */
    'location'?: string;
    /**
     * Error message text
     * @type {string}
     * @memberof ErrorDetail
     */
    'message'?: string;
    /**
     * 
     * @type {any}
     * @memberof ErrorDetail
     */
    'value'?: any;
}
/**
 * 
 * @export
 * @interface ErrorModel
 */
export interface ErrorModel {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof ErrorModel
     */
    '$schema'?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ErrorModel
     */
    'detail'?: string;
    /**
     * Optional list of individual error details
     * @type {Array<ErrorDetail>}
     * @memberof ErrorModel
     */
    'errors'?: Array<ErrorDetail> | null;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     * @type {string}
     * @memberof ErrorModel
     */
    'instance'?: string;
    /**
     * HTTP status code
     * @type {number}
     * @memberof ErrorModel
     */
    'status'?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     * @type {string}
     * @memberof ErrorModel
     */
    'title'?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     * @type {string}
     * @memberof ErrorModel
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface Executable
 */
export interface Executable {
    /**
     * 
     * @type {string}
     * @memberof Executable
     */
    'domain': string;
    /**
     * 
     * @type {string}
     * @memberof Executable
     */
    'entityId': string;
    /**
     * 
     * @type {string}
     * @memberof Executable
     */
    'friendlyName': string;
}
/**
 * 
 * @export
 * @interface LayoutV4
 */
export interface LayoutV4 {
    /**
     * 
     * @type {string}
     * @memberof LayoutV4
     */
    '1'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV4
     */
    '2'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV4
     */
    '3'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV4
     */
    '4'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV4
     */
    '5'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV4
     */
    '6'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV4
     */
    '7'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV4
     */
    '8'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV4
     */
    'off'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV4
     */
    'on'?: string;
}
/**
 * 
 * @export
 * @interface LayoutV5
 */
export interface LayoutV5 {
    /**
     * 
     * @type {string}
     * @memberof LayoutV5
     */
    '5'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV5
     */
    '6'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV5
     */
    '7'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV5
     */
    '8'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LayoutV5
     */
    'flipped'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LayoutV5
     */
    'off'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV5
     */
    'on'?: string;
    /**
     * 
     * @type {Array<WheelRoutine>}
     * @memberof LayoutV5
     */
    'wheel-routines'?: Array<WheelRoutine> | null;
}
/**
 * 
 * @export
 * @interface LayoutV6
 */
export interface LayoutV6 {
    /**
     * 
     * @type {string}
     * @memberof LayoutV6
     */
    '5'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV6
     */
    '6'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV6
     */
    '7'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV6
     */
    '8'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LayoutV6
     */
    'flipped'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LayoutV6
     */
    'off'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV6
     */
    'on'?: string;
    /**
     * 
     * @type {Array<WheelRoutine>}
     * @memberof LayoutV6
     */
    'wheel-routines'?: Array<WheelRoutine> | null;
}
/**
 * 
 * @export
 * @interface LayoutV7
 */
export interface LayoutV7 {
    /**
     * 
     * @type {string}
     * @memberof LayoutV7
     */
    '1'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV7
     */
    '2'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV7
     */
    '3'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV7
     */
    '4'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV7
     */
    '5'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV7
     */
    '6'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV7
     */
    '7'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV7
     */
    '8'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LayoutV7
     */
    'flipped'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LayoutV7
     */
    'off'?: string;
    /**
     * 
     * @type {string}
     * @memberof LayoutV7
     */
    'on'?: string;
}
/**
 * 
 * @export
 * @interface Layouts
 */
export interface Layouts {
    /**
     * 
     * @type {LayoutV4}
     * @memberof Layouts
     */
    'v4'?: LayoutV4;
    /**
     * 
     * @type {LayoutV5}
     * @memberof Layouts
     */
    'v5'?: LayoutV5;
    /**
     * 
     * @type {LayoutV6}
     * @memberof Layouts
     */
    'v6'?: LayoutV6;
    /**
     * 
     * @type {LayoutV7}
     * @memberof Layouts
     */
    'v7'?: LayoutV7;
}
/**
 * 
 * @export
 * @interface ListExecutablesResponseBody
 */
export interface ListExecutablesResponseBody {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof ListExecutablesResponseBody
     */
    '$schema'?: string;
    /**
     * 
     * @type {{ [key: string]: Executable; }}
     * @memberof ListExecutablesResponseBody
     */
    'executables': { [key: string]: Executable; };
}
/**
 * 
 * @export
 * @interface PostPressRequestBody
 */
export interface PostPressRequestBody {
    /**
     * A URL to the JSON Schema for this object.
     * @type {string}
     * @memberof PostPressRequestBody
     */
    '$schema'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostPressRequestBody
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof PostPressRequestBody
     */
    'layout': string;
    /**
     * 
     * @type {string}
     * @memberof PostPressRequestBody
     */
    'switch': string;
}
/**
 * 
 * @export
 * @interface Switch
 */
export interface Switch {
    /**
     * 
     * @type {Layouts}
     * @memberof Switch
     */
    'layouts': Layouts;
}
/**
 * 
 * @export
 * @interface WheelRoutine
 */
export interface WheelRoutine {
    /**
     * 
     * @type {string}
     * @memberof WheelRoutine
     */
    'command': string;
    /**
     * 
     * @type {string}
     * @memberof WheelRoutine
     */
    'name': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof WheelRoutine
     */
    'rgb': Array<number> | null;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExecutables: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/executables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PostPressRequestBody} PostPressRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        press: async (PostPressRequestBody: PostPressRequestBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'PostPressRequestBody' is not null or undefined
            assertParamExists('press', 'PostPressRequestBody', PostPressRequestBody)
            const localVarPath = `/api/press`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PostPressRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Config} Config 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putConfig: async (Config: Config, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'Config' is not null or undefined
            assertParamExists('putConfig', 'Config', Config)
            const localVarPath = `/api/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(Config, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfig(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Config>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfig(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listExecutables(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListExecutablesResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listExecutables(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listExecutables']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PostPressRequestBody} PostPressRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async press(PostPressRequestBody: PostPressRequestBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.press(PostPressRequestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.press']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Config} Config 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putConfig(Config: Config, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Config>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putConfig(Config, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.putConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(options?: RawAxiosRequestConfig): AxiosPromise<Config> {
            return localVarFp.getConfig(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExecutables(options?: RawAxiosRequestConfig): AxiosPromise<ListExecutablesResponseBody> {
            return localVarFp.listExecutables(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostPressRequestBody} PostPressRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        press(PostPressRequestBody: PostPressRequestBody, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.press(PostPressRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Config} Config 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putConfig(Config: Config, options?: RawAxiosRequestConfig): AxiosPromise<Config> {
            return localVarFp.putConfig(Config, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getConfig(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getConfig(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listExecutables(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listExecutables(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostPressRequestBody} PostPressRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public press(PostPressRequestBody: PostPressRequestBody, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).press(PostPressRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Config} Config 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putConfig(Config: Config, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putConfig(Config, options).then((request) => request(this.axios, this.basePath));
    }
}
